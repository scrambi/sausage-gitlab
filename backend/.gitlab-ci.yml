default:
  tags: ["docker"]

stages:
  - build
  - scan-sonar
  - test
  - notify



# ---------- Build ----------
build-backend-code-job:
  stage: build
  tags: [gitlab_runner_1]
  only:
    changes: ["backend/**/*"]
  before_script:
    - 'export NVM_DIR="$HOME/.nvm"'
    - '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'
  script:
    - cd backend
    - ./mvnw clean package -DskipTests
  artifacts:
    name: "backend-$CI_COMMIT_SHORT_SHA"
    paths:
      - backend/target/*.jar
    expire_in: 1 week
    when: always

# ---------- Sonar (Maven) ----------
sonar-scan-backend:
  stage: scan-sonar
  image: maven:3-eclipse-temurin-17
  needs:
    - job: build-backend-code-job
      artifacts: true
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
    MAVEN_OPTS: "-Xmx1024m"
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - ${CI_PROJECT_DIR}/.m2/repository
  before_script:
    - echo "Preparing sonar scan"
    - cd backend
  script:
    - mvn -B -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository 
        org.sonarsource.scanner.maven:sonar-maven-plugin:sonar 
        -Dsonar.host.url="${SONAR_HOST_URL}" 
        -Dsonar.login="${SONAR_TOKEN_BACK}" 
        -Dsonar.projectKey=backend-java
        -Dsonar.projectName=backend-java
        -Dsonar.qualitygate.wait=true
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

include:
  - template: Security/SAST.gitlab-ci.yml

# ---------- Notify ----------
telegram-notification-backend:
  stage: notify
  tags: [gitlab_runner_1]
  needs: [build-backend-code-job]
  only:
    changes: ["backend/**/*"]
    variables:
      - "$CI_COMMIT_MESSAGE =~ /send notification/i"
  script: |
    URL_COMMIT="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job"
    URL_REF="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=build-backend-code-job"
    MSG=$'<b>âœ… Backend build success</b>\n<b>Project:</b> '"$CI_PROJECT_PATH"$'\n<b>Branch:</b> '"$CI_COMMIT_REF_NAME"$'\n<b>Commit:</b> <code>'"$CI_COMMIT_SHORT_SHA"$'</code>\n<b>Artifacts (commit):</b> <a href="'"$URL_COMMIT"'">download</a>\n<b>Artifacts (latest on branch):</b> <a href="'"$URL_REF"'">download</a>'
    curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
      -d chat_id="$TELEGRAM_CHAT_ID" -d parse_mode=HTML \
      --data-urlencode "text=$MSG"