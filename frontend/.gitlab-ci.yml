stages:
  - build
  - analyze
  - notify

# === BUILD (Shell runner) ===
build-frontend-code-job:
  stage: build
  tags: [docker]        # <-- Shell runner
  only:
    changes: ["frontend/**/*"]
  before_script:
    - 'export NVM_DIR="$HOME/.nvm"'
    - '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"'
    - nvm install 10
    - npm -v
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    name: "frontend-$CI_COMMIT_SHORT_SHA"
    paths:
      - frontend/dist/frontend
    expire_in: 1 week
    when: always

# === SAST (Docker runner) ===
sast:
  stage: analyze
  tags: [docker_runner_1]         # <-- ОБЯЗАТЕЛЬНО Docker runner
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH =~ /^(main|master|develop)$/

# === SonarQube (Docker runner) ===
sonarqube_frontend_scan:
  stage: analyze
  tags: [docker_runner_1]         # <-- Docker runner
  image:
    name: sonarsource/sonar-scanner-cli:11
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    policy: pull-push
    paths:
      - .sonar/cache
  script:
    - cd frontend
    - sonar-scanner \
        -Dsonar.projectKey=front \
        -Dsonar.projectName=front \
        -Dsonar.host.url="$SONAR_HOST_URL" \
        -Dsonar.login="$SONAR_TOKEN_FRONT"
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH =~ /^(main|master|develop)$/

# === Telegram (Shell runner, как было) ===
telegram-notification-frontend:
  stage: notify
  tags: [docker]
  needs: [build-frontend-code-job]
  only:
    changes: ["frontend/**/*"]
    variables:
      - "$CI_COMMIT_MESSAGE =~ /send notification/i"
  script:
    - |
      URL_COMMIT="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job"
      URL_REF="$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_REF_NAME/download?job=build-frontend-code-job"
      MSG=$'<b>✅ Frontend build success</b>\n<b>Project:</b> '"$CI_PROJECT_PATH"$'\n<b>Branch:</b> '"$CI_COMMIT_REF_NAME"$'\n<b>Commit:</b> <code>'"$CI_COMMIT_SHORT_SHA"$'</code>\n<b>Artifacts (commit):</b> <a href="'"$URL_COMMIT"'">download</a>\n<b>Artifacts (latest on branch):</b> <a href="'"$URL_REF"'">download</a>'
      curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
        -d chat_id="$TELEGRAM_CHAT_ID" -d parse_mode=HTML \
        --data-urlencode "text=$MSG"
